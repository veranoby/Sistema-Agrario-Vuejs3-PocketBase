<template>
  <v-dialog
    v-model="dialogModel"
    max-width="600px"
    :persistent="false"
    transition="dialog-bottom-transition"
    scrollable
    @click:outside="closeDialog"
  >
    <!-- Rest of your template remains the same -->
    <v-card>
      <v-tabs v-model="tab" fixed-tabs hide-slider>
        <v-tab value="login" :class="tab === 'login' ? 'bg-green-lighten-1' : 'bg-white'">
          <v-icon icon="mdi-login"></v-icon> &nbsp; INGRESAR
        </v-tab>
        <v-tab value="register" :class="tab === 'register' ? 'bg-cyan-darken-1' : 'bg-white'">
          <v-icon icon="mdi-account-plus"></v-icon> &nbsp; USUARIO NUEVO
        </v-tab>
      </v-tabs>

      <v-card-text class="m-0 p-0">
        <v-window v-model="tab">
          <v-window-item value="login" class="m-0 p-0">
            <v-row class="m-0 p-0">
              <v-col class="m-0 p-0">
                <v-img :src="loginLogo" height="200" cover class="m-0 p-0"></v-img>
              </v-col>
            </v-row>
            <v-row class="m-2 p-2">
              <v-col class="m-2 p-2">
                <v-form @submit.prevent="login">
                  <v-row justify="center">
                    <v-col cols="6">
                      INGRESE POR USUARIO...
                      <v-text-field
                        v-model="loginForm.username"
                        class="pt-4"
                        label="Nombre de usuario"
                        variant="outlined"
                        required
                        color="success"
                        density="compact"
                        prepend-inner-icon="mdi-account-outline"
                        @input="loginForm.username = loginForm.username.toUpperCase()"
                      ></v-text-field>
                    </v-col>
                    <v-col cols="6"
                      >... O POR EMAIL
                      <v-text-field
                        v-model="loginForm.email"
                        class="pt-4"
                        label="Email"
                        variant="outlined"
                        type="email"
                        required
                        color="success"
                        density="compact"
                        prepend-inner-icon="mdi-email-outline"
                      ></v-text-field>
                    </v-col>
                    <v-col cols="12">
                      <v-text-field
                        v-model="loginForm.password"
                        class=""
                        label="Password"
                        variant="outlined"
                        required
                        color="success"
                        :append-inner-icon="visible ? 'mdi-eye-off' : 'mdi-eye'"
                        :type="visible ? 'text' : 'password'"
                        density="compact"
                        prepend-inner-icon="mdi-lock-outline"
                        @click:append-inner="visible = !visible"
                      ></v-text-field>
                    </v-col>
                  </v-row>
                  <v-row class="m-0 p-0">
                    <v-col class="m-0 p-0">
                      <v-checkbox
                        class=""
                        v-model="loginForm.rememberMe"
                        label="RECORDARME"
                      ></v-checkbox>
                    </v-col>
                    <v-col class="pt-4">
                      <a
                        class="text-caption text-decoration-none text-green"
                        href="#"
                        rel="noopener noreferrer"
                        @click.prevent="openForgotPasswordDialog"
                        ><strong class="">OLVIDO SU CONTRASEÑA?</strong></a
                      >
                    </v-col>
                  </v-row>

                  <v-btn type="submit" @click="login" color="green" block>INGRESAR</v-btn>
                </v-form>
              </v-col>
            </v-row>
          </v-window-item>

          <v-window-item value="register">
            <v-row class="m-2 p-2">
              <v-col class="m-2 p-2">
                <v-form @submit.prevent="register">
                  <v-row justify="center" v-if="!authStore.registrationSuccess">
                    <v-col cols="12"> REGISTRESE POR FAVOR.. </v-col>
                    <v-col cols="6">
                      <v-text-field
                        v-model="registerForm.username"
                        label="Usuario"
                        variant="outlined"
                        required
                        :error-messages="v$.username.$errors.map((e) => e.$message)"
                        @blur="v$.username.$validate"
                        @input="v$.username.$touch()"
                        @keyup.enter="register"
                      ></v-text-field>
                    </v-col>
                    <v-col cols="6">
                      <v-text-field
                        v-model="registerForm.email"
                        label="Email"
                        variant="outlined"
                        type="email"
                        required
                        :error-messages="v$.email.$errors.map((e) => e.$message)"
                        @blur="v$.email.$validate"
                        @input="v$.email.$touch()"
                        @keyup.enter="register"
                      ></v-text-field>
                    </v-col>
                    <v-col cols="6">
                      <v-text-field
                        v-model="registerForm.firstname"
                        label="Nombres"
                        variant="outlined"
                        required
                        :error-messages="v$.firstname.$errors.map((e) => e.$message)"
                        @blur="v$.firstname.$validate"
                        @input="v$.firstname.$touch()"
                        @keyup.enter="register"
                      ></v-text-field>
                    </v-col>
                    <v-col cols="6">
                      <v-text-field
                        v-model="registerForm.lastname"
                        label="Apellidos"
                        variant="outlined"
                        required
                        :error-messages="v$.lastname.$errors.map((e) => e.$message)"
                        @blur="v$.lastname.$validate"
                        @input="v$.lastname.$touch()"
                        @keyup.enter="register"
                      ></v-text-field>
                    </v-col>
                    <v-col cols="6">
                      <v-text-field
                        v-model="registerForm.password"
                        label="Contraseña"
                        variant="outlined"
                        type="password"
                        required
                        :error-messages="v$.password.$errors.map((e) => e.$message)"
                        @blur="v$.password.$validate"
                        @input="v$.password.$touch()"
                        @keyup.enter="register"
                      ></v-text-field>
                    </v-col>
                    <v-col cols="6">
                      <v-text-field
                        v-model="registerForm.passwordConfirm"
                        label="Confirmar Contraseña"
                        variant="outlined"
                        type="password"
                        required
                        :error-messages="v$.passwordConfirm.$errors.map((e) => e.$message)"
                        @blur="v$.passwordConfirm.$validate"
                        @input="v$.passwordConfirm.$touch()"
                        @keyup.enter="register"
                      ></v-text-field>
                    </v-col>
                    <v-col cols="12">
                      <v-btn
                        type="submit"
                        color="primary"
                        block
                        :loading="loading"
                        :disabled="loading"
                        @click="register"
                        >REGISTRARSE</v-btn
                      >
                    </v-col>
                  </v-row>
                  <v-row justify="center" no-gutters v-else>
                    <v-col cols="12">
                      <br />
                      <h3 class="text-center text-primary">¡Registro exitoso!</h3>
                      <p class="text-center">
                        Hemos enviado un correo de verificación a
                        <strong>{{ registerForm.email }}</strong
                        >. Por favor revise su bandeja de entrada y siga las instrucciones.
                      </p>
                      <v-btn
                        color="primary"
                        block
                        @click="closeModalAndNavigate"
                        >Cerrar</v-btn
                      >
                    </v-col>
                  </v-row>
                </v-form>
              </v-col>
            </v-row>
          </v-window-item>
        </v-window>
      </v-card-text>
    </v-card>
  </v-dialog>

  <!-- Modal de recuperación de contraseña -->
  <v-dialog v-model="forgotPasswordDialog" max-width="500px" transition="dialog-bottom-transition">
    <v-card>
      <v-card-title class="text-h5">Recuperar contraseña</v-card-title>
      <v-card-text>
        <v-text-field
          v-model="resetEmail"
          label="Correo electrónico"
          type="email"
          required
          :error-messages="resetError"
          @keyup.enter="sendPasswordReset"
        ></v-text-field>
      </v-card-text>
      <v-card-actions>
        <v-spacer></v-spacer>
        <v-btn color="blue darken-1" text @click="forgotPasswordDialog = false">Cancelar</v-btn>
        <v-btn color="blue darken-1" text @click="sendPasswordReset" :loading="resetLoading"
          >Enviar</v-btn
        >
      </v-card-actions>
    </v-card>
  </v-dialog>
</template>

<script setup>
import { ref, computed, watch, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { useAuthStore } from '@/stores/authStore'
import { useValidationStore } from '../stores/validationStore'
import { useSnackbarStore } from '../stores/snackbarStore'
import { useSyncStore } from '@/stores/syncStore'
import { useVuelidate } from '@vuelidate/core'
import { required, minLength, sameAs, helpers } from '@vuelidate/validators'
import loginLogo from '../assets/login-logo.png'
import registerLogo from '../assets/register-logo.png'

const props = defineProps({
  isOpen: {
    type: Boolean,
    default: false,
  },
  initialTab: {
    type: String,
    default: 'login',
  },
})

const emit = defineEmits(['update:isOpen', 'loginSuccess', 'HandleDrawer'])

const authStore = useAuthStore()
const validationStore = useValidationStore()
const snackbarStore = useSnackbarStore()
const tab = ref(props.initialTab)
const visible = ref(false)
const usernameAvailable = ref(true)
const emailAvailable = ref(true)
const haciendaAvailable = ref(true)
const syncStore = useSyncStore()
const router = useRouter()
const loading = ref(false)

// Watch for auth state changes
watch(() => authStore.isLoggedIn, (newVal) => {
  if (newVal) {
    dialogModel.value = false
    router.push('/') // Redirect to home after login
  }
})

// Check auth state on mount
onMounted(async () => {
  const isAuthenticated = await authStore.ensureAuthInitialized()
  if (isAuthenticated) {
    dialogModel.value = false
  } else {
    dialogModel.value = true
  }
})

const dialogModel = computed({
  get() {
    return props.isOpen
  },
  set(value) {
    emit('update:isOpen', value)
  },
})

const loginForm = ref({
  username: '',
  email: '',
  password: '',
  rememberMe: false,
})

const registerForm = ref({
  username: '',
  email: '',
  firstname: '',
  lastname: '',
  password: '',
  passwordConfirm: '',
  hacienda: '',
})

const rules = {
  username: {
    required: helpers.withMessage('El nombre de usuario es requerido', required),
    noSpecialChars: helpers.withMessage(
      'No se permiten caracteres especiales',
      (value) => !/["'`!@#$%^&*()+=<>?/\\{}[\]|~:;]/.test(value)
    ),
  },
  email: {
    required: helpers.withMessage('El email es requerido', required),
    email: helpers.withMessage('Debe ser un email válido', (value) =>
      /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)
    ),
  },
  firstname: {
    required: helpers.withMessage('El nombre es requerido', required),
    noSpecialChars: helpers.withMessage(
      'No se permiten caracteres especiales',
      (value) => !/["'`!@#$%^&*()+=<>?/\\{}[\]|~:;]/.test(value)
    ),
  },
  lastname: {
    required: helpers.withMessage('El apellido es requerido', required),
    noSpecialChars: helpers.withMessage(
      'No se permiten caracteres especiales',
      (value) => !/["'`!@#$%^&*()+=<>?/\\{}[\]|~:;]/.test(value)
    ),
  },
  password: {
    required: helpers.withMessage('La contraseña es requerida', required),
    minLength: helpers.withMessage(
      'La contraseña debe tener al menos 6 caracteres',
      minLength(6)
    ),
  },
  passwordConfirm: {
    required: helpers.withMessage('Debe confirmar la contraseña', required),
    sameAs: helpers.withMessage(
      'Las contraseñas no coinciden',
      sameAs(registerForm.value.password)
    ),
  },
}

const v$ = useVuelidate(rules, registerForm)

const login = async () => {
  try {
    loading.value = true
    await authStore.login(
      loginForm.value.username,
      loginForm.value.email,
      loginForm.value.password,
      loginForm.value.rememberMe
    )
    
    if (authStore.isLoggedIn) {
      snackbarStore.showSnackbar('Inicio de sesión exitoso', 'success')
      dialogModel.value = false
      emit('loginSuccess')
    }
  } catch (error) {
    console.error('Login error:', error)
    snackbarStore.showSnackbar(
      error.message || 'Error al iniciar sesión. Por favor intente nuevamente.',
      'error'
    )
  } finally {
    loading.value = false
  }
}

const register = async () => {
  try {
    loading.value = true
    const isValid = await v$.value.$validate()
    
    if (!isValid) {
      return
    }

    await authStore.register(registerForm.value, 'usuario')
    
    if (authStore.registrationSuccess) {
      snackbarStore.showSnackbar('Registro exitoso. Por favor verifica tu correo.', 'success')
      // El formulario se actualizará automáticamente debido a authStore.registrationSuccess
    }
  } catch (error) {
    console.error('Registration error:', error)
    snackbarStore.showSnackbar(
      error.message || 'Error al registrar. Por favor intente nuevamente.',
      'error'
    )
  } finally {
    loading.value = false
  }
}

const closeDialog = () => {
  dialogModel.value = false
}

const closeModalAndNavigate = () => {
  dialogModel.value = false
  tab.value = 'login'
  registerForm.value = {
    username: '',
    email: '',
    firstname: '',
    lastname: '',
    password: '',
    passwordConfirm: '',
    hacienda: '',
  }
  v$.value.$reset()
}

const forgotPasswordDialog = ref(false)
const resetEmail = ref('')
const resetLoading = ref(false)
const resetError = ref('')

const openForgotPasswordDialog = () => {
  resetEmail.value = ''
  resetError.value = ''
  forgotPasswordDialog.value = true
}

const sendPasswordReset = async () => {
  if (!resetEmail.value) {
    resetError.value = 'Por favor ingrese su correo electrónico'
    return
  }

  try {
    resetLoading.value = true
    resetError.value = ''
    
    await pb.collection('users').requestPasswordReset(resetEmail.value)
    
    snackbarStore.showSnackbar(
      'Se ha enviado un correo con instrucciones para restablecer su contraseña',
      'success'
    )
    forgotPasswordDialog.value = false
  } catch (error) {
    console.error('Error sending password reset:', error)
    resetError.value = 'Error al enviar el correo. Por favor intente nuevamente.'
  } finally {
    resetLoading.value = false
  }
}
</script>

<style scoped>
/* Add your styles here */
</style>
