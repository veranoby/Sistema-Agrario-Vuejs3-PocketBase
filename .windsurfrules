# Proyecto Vue.js - Reglas específicas

## Tecnologías y Frameworks

- Dominio experto en: Vue.js, Tailwind CSS, Vue Router, Vuetify, Pinia, PocketBase, Quasar, VueUse, Headless UI

## Estilo y estructura de código

- Usar siempre Composition API con <script setup>
- Implementar arquitectura basada en componentes
- Gestión de estado con Pinia
- Favorecer programación funcional y declarativa; evitar clases
- Organizar archivos sistemáticamente con contenido relacionado
- Usar nombres descriptivos con verbos auxiliares (isLoading, hasError)
- Separar lógica de UI, estado y servicios en archivos/funciones distintos

## Convenciones de nomenclatura

- Directorios en minúsculas con guiones (components/auth-wizard)
- Favorecer exportaciones nombradas para funciones
- Componentes Vue con formato PascalCase (UserProfile.vue)
- Hooks/composables con prefijo "use" (useAuthentication)

## UI y Estilizado

- Componentes elegantes con Vuetify y Tailwind
- Paleta de colores Material Design
- Diseños responsivos mobile-first
- Aplicar principios de contraste, jerarquía y espaciado
- Implementar transiciones y animaciones sutiles
- Utilizar iconos Material Design
- Equilibrar estilos de Vuetify y Tailwind evitando conflictos
- Implementar temas claros/oscuros cuando sea apropiado

## Optimización de rendimiento

- Aprovechar funciones VueUse para mejorar reactividad
- Componentes asíncronos con Suspense y UI fallback
- Carga dinámica para componentes no críticos
- Optimizar imágenes (WebP, datos de tamaño, carga perezosa)
- Estrategia optimizada de fragmentación en proceso de construcción Vite
- Mejorar Web Vitals (LCP, CLS, FID) usando Lighthouse o WebPageTest
- Implementar memorización para operaciones costosas (watchEffect, computed)

## Testing y calidad

- Implementar pruebas unitarias con Vitest/Jest para componentes críticos
- Configurar validación de tipos con TypeScript
- Implementar validación de formularios robusta
- Manejar y mostrar errores de forma elegante y útil

Arquitectura y Tecnologías Core
Stack Tecnológico Principal

Frontend: Vue 3 + Composition API (script setup)
State Management: Pinia con plugin de persistencia
Backend: PocketBase
UI Framework: Vuetify 3 + Tailwind CSS
Router: Vue Router 4
Editor: Quill Editor para rich text
Fechas: date-fns para manipulación de fechas
Validación: Vuelidate para formularios
Offline: Sistema de sincronización personalizado

Principios de Desarrollo

Offline-First: Todas las operaciones deben funcionar sin conexión
Responsive: Mobile-first approach con Tailwind
Modular: Componentes reutilizables y stores separados
BPA Compliant: Seguimiento de Buenas Prácticas Agrícolas

Estructura de Archivos y Naming
Convenciones de Nombres

Componentes: PascalCase (ej: SiembraWorkspace.vue)
Stores: camelCase con sufijo Store (ej: siembrasStore.js)
Composables: camelCase con prefijo use (ej: useValidation.js)
Variables: camelCase en español (ej: siembraInfo, zonaEditando)
Constantes: UPPER_SNAKE_CASE (ej: MAX_FILE_SIZE)

Estructura de Directorios
src/
├── components/
│ ├── forms/ # Formularios reutilizables
│ └── [ComponentName].vue
├── stores/ # Pinia stores
├── utils/ # Utilidades y helpers
├── assets/ # Imágenes y recursos estáticos
└── router/ # Configuración de rutas
Patrones de Componentes Vue
Script Setup Pattern
javascript// SIEMPRE usar Composition API con script setup

<script setup>
import { ref, computed, onMounted } from 'vue'
import { storeToRefs } from 'pinia'

// Props y emits al inicio
const props = defineProps({
  modelValue: Boolean,
  itemData: Object
})

const emit = defineEmits(['update:modelValue', 'saved'])

// Store imports
const someStore = useSomeStore()
const { data } = storeToRefs(someStore)

// Reactive variables
const localData = ref({})
const isLoading = ref(false)

// Computed properties
const isValid = computed(() => localData.value.nombre?.length > 0)

// Methods
async function handleSave() {
  // Implementation
}

// Lifecycle
onMounted(async () => {
  // Implementation
})
</script>

Template Structure
vue<template>
<v-container fluid class="pa-2">

<!-- Header con información contextual -->
<header class="bg-background shadow-sm">
<div class="profile-container">
<!-- Breadcrumbs y chips informativos -->
</div>
</header>

    <!-- Contenido principal -->
    <main class="flex-1 py-2">
      <!-- Contenido aquí -->
    </main>

    <!-- Dialogs al final -->
    <v-dialog v-model="dialogVisible">
      <!-- Dialog content -->
    </v-dialog>

  </v-container>
</template>
Patrones de Stores (Pinia)
Estructura Estándar de Store
javascriptexport const useEntityStore = defineStore('entity', {
  state: () => ({
    entities: [],
    loading: false,
    error: null,
    version: 1,
    lastSync: null
  }),

persist: {
key: 'entity',
storage: sessionStorage,
paths: ['entities']
},

getters: {
getEntityById: (state) => (id) => {
return state.entities.find((entity) => entity.id === id)
}
},

actions: {
async init() {
try {
await this.cargarEntities()
return true
} catch (error) {
handleError(error, 'Error al inicializar entities')
return false
}
},

    async cargarEntities() {
      const syncStore = useSyncStore()
      const haciendaStore = useHaciendaStore()
      this.loading = true

      try {
        // Cargar desde localStorage primero
        const entitiesLocal = syncStore.loadFromLocalStorage('entities')
        if (entitiesLocal?.length) {
          this.entities = entitiesLocal
          this.loading = false
          return this.entities
        }

        // Si online, cargar desde servidor
        if (syncStore.isOnline) {
          const records = await pb.collection('entities').getFullList({
            filter: `hacienda="${haciendaStore.mi_hacienda?.id}"`
          })
          this.entities = records
          syncStore.saveToLocalStorage('entities', records)
        }

        return this.entities
      } catch (error) {
        handleError(error, 'Error al cargar entities')
        return []
      } finally {
        this.loading = false
      }
    },

    async crearEntity(entityData) {
      const syncStore = useSyncStore()
      const haciendaStore = useHaciendaStore()
      const snackbarStore = useSnackbarStore()

      snackbarStore.showLoading()

      const enrichedData = {
        ...entityData,
        hacienda: haciendaStore.mi_hacienda?.id,
        version: this.version
      }

      if (!syncStore.isOnline) {
        const tempId = syncStore.generateTempId()
        const tempEntity = {
          ...enrichedData,
          id: tempId,
          created: new Date().toISOString(),
          updated: new Date().toISOString(),
          _isTemp: true
        }

        this.entities.unshift(tempEntity)
        syncStore.saveToLocalStorage('entities', this.entities)

        await syncStore.queueOperation({
          type: 'create',
          collection: 'entities',
          data: enrichedData,
          tempId
        })

        snackbarStore.hideLoading()
        return tempEntity
      }

      try {
        const record = await pb.collection('entities').create(enrichedData)
        this.entities.unshift(record)
        syncStore.saveToLocalStorage('entities', this.entities)
        return record
      } catch (error) {
        handleError(error, 'Error al crear entity')
        throw error
      } finally {
        snackbarStore.hideLoading()
      }
    }

}
})
Patrones de Formularios
Formulario Estándar
vue<template>
<v-dialog v-model="dialogVisible" persistent max-width="800px">
<v-card>
<v-toolbar :color="formColor" dark>
<v-toolbar-title>{{ formTitle }}</v-toolbar-title>
<v-spacer></v-spacer>
</v-toolbar>

      <v-form @submit.prevent="guardar" ref="form" v-model="formValid">
        <v-card-text>
          <!-- Campos del formulario -->
          <v-text-field
            v-model="formData.nombre"
            label="Nombre"
            :rules="[(v) => !!v || 'Nombre requerido']"
            variant="outlined"
            density="compact"
            class="compact-form"
            required
          />
        </v-card-text>

        <v-card-actions>
          <v-spacer></v-spacer>
          <v-btn
            size="small"
            variant="flat"
            rounded="lg"
            prepend-icon="mdi-cancel"
            color="red-lighten-3"
            @click="cerrar"
          >
            Cancelar
          </v-btn>
          <v-btn
            type="submit"
            size="small"
            variant="flat"
            rounded="lg"
            prepend-icon="mdi-check"
            :color="formColor"
            :disabled="!formValid"
          >
            Guardar
          </v-btn>
        </v-card-actions>
      </v-form>
    </v-card>

  </v-dialog>
</template>

<script setup>
const props = defineProps({
  modelValue: Boolean,
  itemEditando: Object
})

const emit = defineEmits(['update:modelValue', 'guardado'])

const dialogVisible = computed({
  get: () => props.modelValue,
  set: (value) => emit('update:modelValue', value)
})

const formValid = ref(false)
const formData = ref({
  nombre: '',
  // otros campos
})

const formColor = computed(() => props.itemEditando ? 'orange' : 'green')
const formTitle = computed(() => props.itemEditando ? 'Editar' : 'Crear')

async function guardar() {
  if (!formValid.value) return
  
  try {
    // Lógica de guardado
    emit('guardado')
    cerrar()
  } catch (error) {
    handleError(error, 'Error al guardar')
  }
}

function cerrar() {
  dialogVisible.value = false
}
</script>

Patrones de Datos y BPA
Estructura de Datos BPA
javascript// Estructura estándar para datos BPA
const datosBpa = [
{
pregunta: "¿Se implementan prácticas de conservación del suelo?",
descripcion: "Descripción detallada de la práctica",
opciones: ["Implementado", "En proceso", "No implementado"],
respuesta: null
}
]

// Cálculo de estado BPA
function calcularBpaEstado(datosBpa) {
if (!datosBpa || datosBpa.length === 0) return 0

const puntosObtenidos = datosBpa.reduce((acc, pregunta) => {
const respuestasPositivas = [
'Implementado', 'Implementados', 'Implementadas', 'Implementada',
'Disponibles', 'Realizado', 'Utilizadas', 'Realizados',
'Cumplido', 'Disponible'
]

    if (respuestasPositivas.includes(pregunta.respuesta)) return acc + 100
    if (pregunta.respuesta === 'En proceso') return acc + 50
    return acc

}, 0)

return Math.round((puntosObtenidos / (datosBpa.length _ 100)) _ 100)
}
Sistema de Métricas Personalizables
javascript// Estructura para métricas dinámicas
const metricas = {
area_plantada: {
tipo: 'number',
valor: 0,
descripcion: 'Área plantada en hectáreas',
unidad: 'ha'
},
variedad: {
tipo: 'select',
valor: null,
descripcion: 'Variedad cultivada',
opciones: ['Tipo A', 'Tipo B', 'Tipo C']
},
certificaciones: {
tipo: 'multi-select',
valor: [],
descripcion: 'Certificaciones aplicables',
opciones: ['Orgánico', 'Fair Trade', 'Rainforest']
}
}

// Valor por defecto según tipo
function getDefaultMetricaValue(tipo) {
switch (tipo) {
case 'checkbox': return []
case 'number': return 0
case 'text': return ''
case 'boolean': return false
case 'select': return null
case 'multi-select': return []
case 'date': return new Date().toISOString().split('T')[0]
default: return null
}
}
Estilos y UI
Clases CSS Personalizadas
css/_ Usar estas clases para consistencia _/
.compact-form {
transform: scale(0.75);
transform-origin: left;
width: 120%;
}

.compact-form-2 {
transform: scale(0.66);
transform-origin: left;
width: 130%;
}

.profile-container {
background-color: var(--fondo_claro);
padding: 24px;
border-radius: 12px;
position: relative;
}

.siembra-info, .bg-dinamico {
background-color: var(--fondo_claro_tabla);
border-radius: 8px;
box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
Patrones de Layout
vue<!-- Header estándar -->

<header class="bg-background shadow-sm">
  <div class="profile-container">
    <h3 class="profile-title">
      <!-- Breadcrumbs -->
      <nav class="flex mb-3" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-2 bg-green-lighten-4 py-2 px-4 rounded-r-full">
          <li>
            <router-link to="/parent" class="text-sm font-extrabold">
              PARENT
            </router-link>
          </li>
          <li>
            <v-icon>mdi-chevron-right</v-icon>
            <span class="text-sm font-extrabold">CURRENT</span>
          </li>
        </ol>
      </nav>
      
      <!-- Chips informativos -->
      <v-chip variant="flat" size="x-small" color="green-lighten-3" pill>
        <v-avatar start>
          <v-img :src="avatarUrl" alt="Avatar"></v-img>
        </v-avatar>
        {{ contextInfo }}
      </v-chip>
    </h3>
  </div>
</header>
Gestión de Estados y Sincronización
Operaciones Offline
javascript// SIEMPRE implementar modo offline
async function crearElemento(data) {
  const syncStore = useSyncStore()
  
  if (!syncStore.isOnline) {
    // Crear elemento temporal
    const tempId = syncStore.generateTempId()
    const tempElement = {
      ...data,
      id: tempId,
      _isTemp: true,
      created: new Date().toISOString()
    }
    
    // Guardar localmente
    this.elements.unshift(tempElement)
    syncStore.saveToLocalStorage('elements', this.elements)
    
    // Encolar para sincronización
    await syncStore.queueOperation({
      type: 'create',
      collection: 'elements',
      data,
      tempId
    })
    
    return tempElement
  }
  
  // Modo online normal...
}
Patrones de Validación
Reglas de Validación Estándar
javascript// Reglas comunes de validación
const validationRules = {
  required: (v) => !!v || 'Campo requerido',
  email: (v) => /.+@.+\..+/.test(v) || 'Email inválido',
  minLength: (min) => (v) => (v && v.length >= min) || `Mínimo ${min} caracteres`,
  numeric: (v) => !isNaN(v) || 'Debe ser numérico',
  positiveNumber: (v) => (v > 0) || 'Debe ser mayor a 0',
  noSpecialChars: (v) => !/["'`!@#$%^&*()+=<>?\/\\{}[\]|~:;]/.test(v) || 'Sin caracteres especiales'
}
Manejo de Fechas
Patrones de Fecha
javascriptimport { format, parseISO, addDays, differenceInDays } from 'date-fns'

// SIEMPRE usar date-fns para manipulación de fechas
const formatFecha = (fecha) => {
if (!fecha) return 'N/A'
return format(parseISO(fecha), 'dd/MM/yyyy')
}

// Para inputs de fecha
const formatFechaInput = (fecha) => {
if (!fecha) return ''
return format(parseISO(fecha), 'yyyy-MM-dd')
}
Patrones de Error Handling
Gestión de Errores
javascriptimport { handleError } from '@/utils/errorHandler'

try {
await someOperation()
} catch (error) {
handleError(error, 'Mensaje contextual para el usuario')
}
Reglas Específicas del Dominio Agrario
Entidades Principales

Hacienda: Entidad principal que contiene todo
Siembra: Proyectos agrícolas (pueden tener zonas)
Zona: Subdivisiones (lotes de siembra o infraestructura)
Actividad: Tareas relacionadas (fertilización, limpieza, etc.)
Programación: Horarios recurrentes para actividades
Recordatorio: Alertas y tareas pendientes
Bitácora: Registro de actividades ejecutadas

Jerarquía de Datos
Hacienda
├── Siembras
│ └── Zonas (Lotes)
├── Zonas (Infraestructura)
├── Actividades
├── Programaciones
├── Recordatorios
└── Bitácora
Estados de Siembra

planificada: En planificación
en_crecimiento: En desarrollo
cosechada: Lista para cosecha
finalizada: Completada

Sistema BPA

Cada zona/actividad tiene preguntas BPA
Respuestas: "Implementado" (100%), "En proceso" (50%), "No implementado" (0%)
Cálculo automático de porcentaje BPA

Comandos y Scripts Útiles
Scripts de Desarrollo
bash# Desarrollo
npm run dev

# Build para producción

npm run build

# Linting

npm run lint

# Formato de código

npm run format
Notas Importantes

SIEMPRE implementar modo offline-first
SIEMPRE usar el sistema de sincronización para operaciones CRUD
SIEMPRE validar datos antes de enviar al servidor
SIEMPRE manejar errores con el helper handleError
SIEMPRE usar computed para datos derivados
SIEMPRE usar storeToRefs para reactividad con Pinia
SIEMPRE implementar loading states en operaciones async
NUNCA usar localStorage directamente, usar syncStore.saveToLocalStorage
NUNCA hardcodear strings, usar computed o constantes
SIEMPRE usar Composition API con script setup
